<?xml version="1.0"?>
<doc>
    <assembly>
        <name>RemoteCongress.Client.DAL.Http</name>
    </assembly>
    <members>
        <member name="T:RemoteCongress.Client.DAL.Http.ClientConfig">
            <summary>
            Configuration data defining how to connect to the RemoteCongress api server.
            </summary>
        </member>
        <member name="P:RemoteCongress.Client.DAL.Http.ClientConfig.Protocol">
            <summary>
            Protocol to use to connect to the Api.
            </summary>
        </member>
        <member name="P:RemoteCongress.Client.DAL.Http.ClientConfig.ServerHostName">
            <summary>
            The hostname of the server running the RemoteCongress Api
            </summary>
        </member>
        <member name="M:RemoteCongress.Client.DAL.Http.ClientConfig.#ctor(System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="protocol">
            The protocol to connect to the server with. Example: http or https
            </param>
            <param name="serverHostName">
            The hostname of the server running the RemoteCongress Api
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="protocol"/> is null.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="serverHostName"/> is null.
            </exception>
        </member>
        <member name="T:RemoteCongress.Client.DAL.Http.HttpDataClient">
            <summary>
            An <see cref="T:RemoteCongress.Common.Repositories.IDataClient"/> that operates over http.
            </summary>
        </member>
        <member name="M:RemoteCongress.Client.DAL.Http.HttpDataClient.#ctor(Microsoft.Extensions.Logging.ILogger{RemoteCongress.Client.DAL.Http.HttpDataClient},RemoteCongress.Client.DAL.Http.ClientConfig,System.Net.Http.HttpClient,RemoteCongress.Common.Serialization.ICodec{RemoteCongress.Common.Repositories.Queries.IQuery},System.Collections.Generic.IEnumerable{RemoteCongress.Common.Serialization.ICodec{RemoteCongress.Common.SignedData}},System.Collections.Generic.IEnumerable{RemoteCongress.Common.Serialization.ICodec{System.Collections.Generic.IEnumerable{RemoteCongress.Common.SignedData}}},System.String)">
            <summary>
            Constructor
            </summary>
            <param name="logger">
            An <see cref="T:Microsoft.Extensions.Logging.ILogger"/> to log against.
            </param>
            <param name="config">
            A <see cref="T:RemoteCongress.Client.DAL.Http.ClientConfig"/> instance that holds configuration data on connecting to the server.
            </param>
            <param name="httpClient">
            A <see cref="T:System.Net.Http.HttpClient"/> instance to use to communicate with the server.
            </param>
            <param name="queryCodec">
            A <see cref="T:RemoteCongress.Common.Serialization.ICodec`1"/> instance to use.
            </param>
            <param name="codecs">
            An <see cref="T:RemoteCongress.Common.Serialization.ICodec`1"/> for <see cref="T:RemoteCongress.Common.SignedData"/>.
            </param>
            <param name="collectionCodecs">
            An <see cref="T:RemoteCongress.Common.Serialization.ICodec`1"/> for a collection of <see cref="T:RemoteCongress.Common.SignedData"/>s.
            </param>
            <param name="endpoint">
            The endpoint to this client should hit.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="logger"/> is null.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="config"/> is null.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="httpClient"/> is null.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="queryCodec"/> is null.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="codecs"/> is null.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="collectionCodecs"/> is null.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="endpoint"/> is null.
            </exception>
        </member>
        <member name="M:RemoteCongress.Client.DAL.Http.HttpDataClient.AppendToChain(RemoteCongress.Common.ISignedData,System.Threading.CancellationToken)">
            <summary>
            Creates a new block containing the verified content in <paramref name="data"/> in the blockchain.
            </summary>
            <param name="data">
            The signed and verified data structure to store in the blockchain.
            </param>
            <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken"/> to handle cancellation requests.
            </param>
            <returns>
            The unique id of the stored block.
            </returns>
            <exception cref="T:System.OperationCanceledException">
            Thrown if <paramref name="cancellationToken"/> is cancelled.
            </exception>
            <exception cref="T:RemoteCongress.Common.Exceptions.UnknownBlockMediaTypeException">
            Thrown if <see cref="F:RemoteCongress.Common.Serialization.SignedDataV1JsonCodec.MediaType"/> doesn't have a registered <see cref="T:RemoteCongress.Common.Serialization.ICodec`1"/>.
            </exception>
        </member>
        <member name="M:RemoteCongress.Client.DAL.Http.HttpDataClient.FetchFromChain(System.String,System.Threading.CancellationToken)">
            <summary>
            Fetches the verified data in the form of <see cref="T:RemoteCongress.Common.ISignedData"/> from the blockchain by block id.
            </summary>
            <param name="id">
            The unique block id to pull verified data from.
            </param>
            <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken"/> to handle cancellation requests.
            </param>
            <returns>
            An <see cref="T:RemoteCongress.Common.ISignedData"/> instance containing the block data.
            </returns>
            <exception cref="T:System.OperationCanceledException">
            Thrown if <paramref name="cancellationToken"/> is cancelled.
            </exception>
            <exception cref="T:RemoteCongress.Common.Exceptions.UnknownBlockMediaTypeException">
            Thrown if <see cref="F:RemoteCongress.Common.Serialization.SignedDataV1JsonCodec.MediaType"/> doesn't have a registered <see cref="T:RemoteCongress.Common.Serialization.ICodec`1"/>.
            </exception>
        </member>
        <member name="M:RemoteCongress.Client.DAL.Http.HttpDataClient.FetchAllFromChain(System.Collections.Generic.IEnumerable{RemoteCongress.Common.Repositories.Queries.IQuery},System.Threading.CancellationToken)">
            <summary>
            Fetches all matching verified data in the form of <see cref="T:RemoteCongress.Common.ISignedData"/> from the blockchain.
            </summary>
            <param name="queries">
            The query to pull data by.
            </param>
            <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken"/> to handle cancellation requests.
            </param>
            <returns>
            An <see cref="T:RemoteCongress.Common.ISignedData"/> instance containing the block data.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="queries"/> is null.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            Thrown if <paramref name="cancellationToken"/> is cancelled.
            </exception>
            <exception cref="T:RemoteCongress.Common.Exceptions.UnknownBlockMediaTypeException">
            Thrown if <see cref="F:RemoteCongress.Common.Serialization.SignedDataCollectionV1JsonCodec.MediaType"/> doesn't have a registered <see cref="T:RemoteCongress.Common.Serialization.ICodec`1"/>.
            </exception>
        </member>
        <member name="M:RemoteCongress.Client.DAL.Http.HttpDataClient.GetSignedDataCollectionForMediaType(RemoteCongress.Common.RemoteCongressMediaType)">
            <summary>
            Fetches the codec for a collection data for a mediatype
            </summary>
            <param name="mediaType">
            The media type to fetch a collection codec for
            </param>
            <returns>
            The codec
            </returns>
            <exception cref="T:RemoteCongress.Common.Exceptions.UnknownBlockMediaTypeException">
            Thrown if <paramref name="mediaType"/> doesn't have a registered <see cref="T:RemoteCongress.Common.Serialization.ICodec`1"/>.
            </exception>
        </member>
        <member name="M:RemoteCongress.Client.DAL.Http.HttpDataClient.GetSignedDataForMediaType(RemoteCongress.Common.RemoteCongressMediaType)">
            <summary>
            Fetches the codec for a mediatype
            </summary>
            <param name="mediaType">
            The media type to fetch a codec for
            </param>
            <returns>
            The codec
            </returns>
            <exception cref="T:RemoteCongress.Common.Exceptions.UnknownBlockMediaTypeException">
            Thrown if <paramref name="mediaType"/> doesn't have a registered <see cref="T:RemoteCongress.Common.Serialization.ICodec`1"/>.
            </exception>
        </member>
    </members>
</doc>
