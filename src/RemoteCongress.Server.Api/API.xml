<?xml version="1.0"?>
<doc>
    <assembly>
        <name>RemoteCongress.Server.Api</name>
    </assembly>
    <members>
        <member name="T:RemoteCongress.Server.Api.ConfigureMvcOptions">
            <summary>
            
            </summary>
        </member>
        <member name="M:RemoteCongress.Server.Api.ConfigureMvcOptions.#ctor(Microsoft.Extensions.Logging.ILogger{RemoteCongress.Server.Api.ConfigureMvcOptions},Microsoft.Extensions.Logging.ILoggerFactory,System.Collections.Generic.IEnumerable{RemoteCongress.Common.Serialization.ICodec{RemoteCongress.Common.SignedData}},System.Collections.Generic.IEnumerable{RemoteCongress.Common.Serialization.ICodec{System.Collections.Generic.IEnumerable{RemoteCongress.Common.SignedData}}},System.Collections.Generic.IEnumerable{RemoteCongress.Common.Serialization.ICodec{RemoteCongress.Common.Bill}},System.Collections.Generic.IEnumerable{RemoteCongress.Common.Serialization.ICodec{RemoteCongress.Common.Member}},System.Collections.Generic.IEnumerable{RemoteCongress.Common.Serialization.ICodec{RemoteCongress.Common.Vote}})">
            <summary>
            
            </summary>
            <param name="logger">
            
            </param>
            <param name="loggerFactory">
            
            </param>
            <param name="signedDataCodecs">
            
            </param>
            <param name="signedDataCollectionCodecs">
            
            </param>
            <param name="billDataCodecs">
            
            </param>
            <param name="memberDataCodecs">
            
            </param>
            <param name="voteDataCodecs">
            
            </param>
        </member>
        <member name="M:RemoteCongress.Server.Api.ConfigureMvcOptions.Configure(Microsoft.AspNetCore.Mvc.MvcOptions)">
            <summary>
            
            </summary>
            <param name="options">
            
            </param>
        </member>
        <member name="T:RemoteCongress.Server.Api.Controllers.Base.BaseCreateController`1">
            <summary>
            Exposes an endpoint to persist <typeparamref name="TModel"/>s.
            </summary>
        </member>
        <member name="M:RemoteCongress.Server.Api.Controllers.Base.BaseCreateController`1.#ctor(Microsoft.Extensions.Logging.ILogger{RemoteCongress.Server.Api.Controllers.Base.BaseCreateController{`0}},RemoteCongress.Common.Repositories.IImmutableDataRepository{`0})">
            <summary>
            Constructor
            </summary>
            <param name="logger">
            An <see cref="T:Microsoft.Extensions.Logging.ILogger"/> instance to log against.
            </param>
            <param name="repository">
            An <see cref="T:RemoteCongress.Common.Repositories.IImmutableDataRepository`1"/> instance.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="repository"/> is null.
            </exception>
        </member>
        <member name="M:RemoteCongress.Server.Api.Controllers.Base.BaseCreateController`1.Post(RemoteCongress.Common.VerifiedData{`0},System.Threading.CancellationToken)">
            <summary>
            Persists a <typeparamref name="TModel"/>.
            </summary>
            <param name="model">
            The <typeparamref name="TModel"/> to persist.
            </param>
            <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken"/> to handle cancellation.
            </param>
            <returns>
            The persisted, signed, and validiated <typeparamref name="TModel"/>.
            </returns>
        </member>
        <member name="M:RemoteCongress.Server.Api.Controllers.Base.BaseCreateController`1.Validate(RemoteCongress.Common.VerifiedData{`0},System.Threading.CancellationToken)">
            <summary>
            Ensures that a create model request is valid.
            </summary>
            <param name="model">
            A <typeparamref name="TModel"/> to persist.
            </param>
            <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken"/> to handle cancellation.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="model"/> is null.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            Thrown if <paramref name="cancellationToken"/> is null.
            </exception>
        </member>
        <member name="T:RemoteCongress.Server.Api.Controllers.Base.BaseFetchCollectionController`1">
            <summary>
            Exposes an endpoint to fetch a <typeparamref name="TModel"/>.
            </summary>
        </member>
        <member name="M:RemoteCongress.Server.Api.Controllers.Base.BaseFetchCollectionController`1.#ctor(Microsoft.Extensions.Logging.ILogger{RemoteCongress.Server.Api.Controllers.Base.BaseFetchCollectionController{`0}},RemoteCongress.Common.Repositories.IImmutableDataRepository{`0})">
            <summary>
            Constructor
            </summary>
            <param name="logger">
            An <see cref="T:Microsoft.Extensions.Logging.ILogger"/> instance to log against.
            </param>
            <param name="repository">
            An <see cref="T:RemoteCongress.Common.Repositories.IImmutableDataRepository`1"/> instance.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="logger"/> is null.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="repository"/> is null.
            </exception>
        </member>
        <member name="M:RemoteCongress.Server.Api.Controllers.Base.BaseFetchCollectionController`1.Get(System.Collections.Generic.IList{RemoteCongress.Common.Repositories.Queries.IQuery},System.Threading.CancellationToken)">
            <summary>
            Fetches all <typeparamref name="TModel"/>s.
            </summary>
            <param name="query">
            A collection of <see cref="T:RemoteCongress.Common.Repositories.Queries.IQuery"/>s to filter the result by.
            </param>
            <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken"/> to handle cancellation.
            </param>
            <returns>
            The persisted, signed, and validated <typeparamref name="TModel"/>s.
            </returns>
        </member>
        <member name="T:RemoteCongress.Server.Api.Controllers.Base.BaseFetchController`1">
            <summary>
            Exposes an endpoint to fetch a <typeparamref name="TModel"/>.
            </summary>
        </member>
        <member name="M:RemoteCongress.Server.Api.Controllers.Base.BaseFetchController`1.#ctor(Microsoft.Extensions.Logging.ILogger{RemoteCongress.Server.Api.Controllers.Base.BaseFetchController{`0}},RemoteCongress.Common.Repositories.IImmutableDataRepository{`0})">
            <summary>
            Constructor
            </summary>
            <param name="logger">
            An <see cref="T:Microsoft.Extensions.Logging.ILogger"/> instance to log against.
            </param>
            <param name="repository">
            An <see cref="T:RemoteCongress.Common.Repositories.IImmutableDataRepository`1"/> instance.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="repository"/> is null.
            </exception>
        </member>
        <member name="M:RemoteCongress.Server.Api.Controllers.Base.BaseFetchController`1.Get(System.String,System.Threading.CancellationToken)">
            <summary>
            Fetches a <typeparamref name="TModel"/>.
            </summary>
            <param name="id">
            The <see cref="P:RemoteCongress.Common.IIdentifiable.Id"/> of the <typeparamref name="TModel"/> to fetch.
            </param>
            <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken"/> to handle cancellation.
            </param>
            <returns>
            The persisted, signed, and validiated <typeparamref name="TModel"/>.
            </returns>
        </member>
        <member name="M:RemoteCongress.Server.Api.Controllers.Base.BaseFetchController`1.Validate(System.String,System.Threading.CancellationToken)">
            <summary>
            Ensures that a fetch model request is valid.
            </summary>
            <param name="id">
            An id of a <typeparamref name="TModel"/> to fetch.
            </param>
            <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken"/> to handle cancellation.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="id"/> is null.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            Thrown if <paramref name="cancellationToken"/> is null.
            </exception>
        </member>
        <member name="T:RemoteCongress.Server.Api.Controllers.Bills.CreateBillController">
            <summary>
            Exposes an endpoint to persist <see cref="T:RemoteCongress.Common.Bill"/>s.
            </summary>
        </member>
        <member name="M:RemoteCongress.Server.Api.Controllers.Bills.CreateBillController.#ctor(Microsoft.Extensions.Logging.ILogger{RemoteCongress.Server.Api.Controllers.Bills.CreateBillController},RemoteCongress.Common.Repositories.IImmutableDataRepository{RemoteCongress.Common.Bill})">
            <summary>
            Constructor
            </summary>
            <param name="logger">
            An <see cref="T:Microsoft.Extensions.Logging.ILogger"/> instance to log against.
            </param>
            <param name="repository">
            An <see cref="T:RemoteCongress.Common.Repositories.IImmutableDataRepository`1"/> instance.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="repository"/> is null.
            </exception>
        </member>
        <member name="T:RemoteCongress.Server.Api.Controllers.Bills.FetchBillController">
            <summary>
            Exposes an endpoint to fetch a <see cref="T:RemoteCongress.Common.Bill"/>.
            </summary>
        </member>
        <member name="M:RemoteCongress.Server.Api.Controllers.Bills.FetchBillController.#ctor(Microsoft.Extensions.Logging.ILogger{RemoteCongress.Server.Api.Controllers.Bills.FetchBillController},RemoteCongress.Common.Repositories.IImmutableDataRepository{RemoteCongress.Common.Bill})">
            <summary>
            Constructor
            </summary>
            <param name="logger">
            An <see cref="T:Microsoft.Extensions.Logging.ILogger"/> instance to log against.
            </param>
            <param name="repository">
            An <see cref="T:RemoteCongress.Common.Repositories.IImmutableDataRepository`1"/> instance.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="repository"/> is null.
            </exception>
        </member>
        <member name="T:RemoteCongress.Server.Api.Controllers.Bills.FetchBillsController">
            <summary>
            Exposes an endpoint to fetch a collection of <see cref="T:RemoteCongress.Common.Bill"/>s.
            </summary>
        </member>
        <member name="M:RemoteCongress.Server.Api.Controllers.Bills.FetchBillsController.#ctor(Microsoft.Extensions.Logging.ILogger{RemoteCongress.Server.Api.Controllers.Bills.FetchBillsController},RemoteCongress.Common.Repositories.IImmutableDataRepository{RemoteCongress.Common.Bill})">
            <summary>
            Constructor
            </summary>
            <param name="logger">
            An <see cref="T:Microsoft.Extensions.Logging.ILogger"/> instance to log against.
            </param>
            <param name="repository">
            An <see cref="T:RemoteCongress.Common.Repositories.IImmutableDataRepository`1"/> instance.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="logger"/> is null.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="repository"/> is null.
            </exception>
        </member>
        <member name="T:RemoteCongress.Server.Api.Controllers.Members.CreateMemberController">
            <summary>
            Exposes an endpoint to persist <see cref="T:RemoteCongress.Common.Member"/>s.
            </summary>
        </member>
        <member name="M:RemoteCongress.Server.Api.Controllers.Members.CreateMemberController.#ctor(Microsoft.Extensions.Logging.ILogger{RemoteCongress.Server.Api.Controllers.Members.CreateMemberController},RemoteCongress.Common.Repositories.IImmutableDataRepository{RemoteCongress.Common.Member})">
            <summary>
            Constructor
            </summary>
            <param name="logger">
            An <see cref="T:Microsoft.Extensions.Logging.ILogger"/> instance to log against.
            </param>
            <param name="repository">
            An <see cref="T:RemoteCongress.Common.Repositories.IImmutableDataRepository`1"/> instance.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="repository"/> is null.
            </exception>
        </member>
        <member name="T:RemoteCongress.Server.Api.Controllers.Members.FetchMemberController">
            <summary>
            Exposes an endpoint to fetch a <see cref="T:RemoteCongress.Common.Member"/>.
            </summary>
        </member>
        <member name="M:RemoteCongress.Server.Api.Controllers.Members.FetchMemberController.#ctor(Microsoft.Extensions.Logging.ILogger{RemoteCongress.Server.Api.Controllers.Members.FetchMemberController},RemoteCongress.Common.Repositories.IImmutableDataRepository{RemoteCongress.Common.Member})">
            <summary>
            Constructor
            </summary>
            <param name="logger">
            An <see cref="T:Microsoft.Extensions.Logging.ILogger"/> instance to log against.
            </param>
            <param name="repository">
            An <see cref="T:RemoteCongress.Common.Repositories.IImmutableDataRepository`1"/> instance.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="repository"/> is null.
            </exception>
        </member>
        <member name="T:RemoteCongress.Server.Api.Controllers.Members.FetchMembersController">
            <summary>
            Exposes an endpoint to fetch a collection of <see cref="T:RemoteCongress.Common.Member"/>s.
            </summary>
        </member>
        <member name="M:RemoteCongress.Server.Api.Controllers.Members.FetchMembersController.#ctor(Microsoft.Extensions.Logging.ILogger{RemoteCongress.Server.Api.Controllers.Members.FetchMembersController},RemoteCongress.Common.Repositories.IImmutableDataRepository{RemoteCongress.Common.Member})">
            <summary>
            Constructor
            </summary>
            <param name="logger">
            An <see cref="T:Microsoft.Extensions.Logging.ILogger"/> instance to log against.
            </param>
            <param name="repository">
            An <see cref="T:RemoteCongress.Common.Repositories.IImmutableDataRepository`1"/> instance.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="logger"/> is null.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="repository"/> is null.
            </exception>
        </member>
        <member name="T:RemoteCongress.Server.Api.Controllers.Votes.CreateVoteController">
            <summary>
            Exposes an endpoint to persist <see cref="T:RemoteCongress.Common.Vote"/>s.
            </summary>
        </member>
        <member name="M:RemoteCongress.Server.Api.Controllers.Votes.CreateVoteController.#ctor(Microsoft.Extensions.Logging.ILogger{RemoteCongress.Server.Api.Controllers.Votes.CreateVoteController},RemoteCongress.Common.Repositories.IImmutableDataRepository{RemoteCongress.Common.Vote})">
            <summary>
            Constructor
            </summary>
            <param name="logger">
            An <see cref="T:Microsoft.Extensions.Logging.ILogger"/> instance to log against.
            </param>
            <param name="repository">
            An <see cref="T:RemoteCongress.Common.Repositories.IImmutableDataRepository`1"/> instance.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="repository"/> is null.
            </exception>
        </member>
        <member name="T:RemoteCongress.Server.Api.Controllers.Votes.FetchVoteController">
            <summary>
            Exposes an endpoint to fetch a <see cref="T:RemoteCongress.Common.Vote"/>.
            </summary>
        </member>
        <member name="M:RemoteCongress.Server.Api.Controllers.Votes.FetchVoteController.#ctor(Microsoft.Extensions.Logging.ILogger{RemoteCongress.Server.Api.Controllers.Votes.FetchVoteController},RemoteCongress.Common.Repositories.IImmutableDataRepository{RemoteCongress.Common.Vote})">
            <summary>
            Constructor
            </summary>
            <param name="logger">
            An <see cref="T:Microsoft.Extensions.Logging.ILogger"/> instance to log against.
            </param>
            <param name="repository">
            An <see cref="T:RemoteCongress.Common.Repositories.IImmutableDataRepository`1"/> instance.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="repository"/> is null.
            </exception>
        </member>
        <member name="T:RemoteCongress.Server.Api.Controllers.Votes.FetchVotesController">
            <summary>
            Exposes an endpoint to fetch a collection of <see cref="T:RemoteCongress.Common.Vote"/>s.
            </summary>
        </member>
        <member name="M:RemoteCongress.Server.Api.Controllers.Votes.FetchVotesController.#ctor(Microsoft.Extensions.Logging.ILogger{RemoteCongress.Server.Api.Controllers.Votes.FetchVotesController},RemoteCongress.Common.Repositories.IImmutableDataRepository{RemoteCongress.Common.Vote})">
            <summary>
            Constructor
            </summary>
            <param name="logger">
            An <see cref="T:Microsoft.Extensions.Logging.ILogger"/> instance to log against.
            </param>
            <param name="repository">
            An <see cref="T:RemoteCongress.Common.Repositories.IImmutableDataRepository`1"/> instance.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="logger"/> is null.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="repository"/> is null.
            </exception>
        </member>
        <member name="T:RemoteCongress.Server.Api.ExceptionFilters.BaseExceptionFilter">
            <summary>
            An abstract excpetion handler implementation to transform exceptions into http status codes.
            </summary>
        </member>
        <member name="P:RemoteCongress.Server.Api.ExceptionFilters.BaseExceptionFilter.StatusCode">
            <summary>
            The http status code to be returned from this handler
            </summary>
        </member>
        <member name="M:RemoteCongress.Server.Api.ExceptionFilters.BaseExceptionFilter.#ctor(Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Constructor
            </summary>
            <param name="logger">
            An <see cref="T:Microsoft.Extensions.Logging.ILogger"/> instance for logging
            </param>
        </member>
        <member name="M:RemoteCongress.Server.Api.ExceptionFilters.BaseExceptionFilter.OnExceptionAsync(Microsoft.AspNetCore.Mvc.Filters.ExceptionContext)">
            <summary>
            Tests and runs this handle for an exceptional event
            </summary>
            <param name="context">
            The exception context of the exceptional event.
            </param>
        </member>
        <member name="M:RemoteCongress.Server.Api.ExceptionFilters.BaseExceptionFilter.CanHandle(System.Exception)">
            <summary>
            Checks if the exception can be handled by this handler
            </summary>
            <param name="exception">
            The exception that needs handling
            </param>
            <returns>
            true, if the exception can be handled
            </returns>
        </member>
        <member name="M:RemoteCongress.Server.Api.ExceptionFilters.BaseExceptionFilter.Logic(Microsoft.AspNetCore.Mvc.Filters.ExceptionContext)">
            <summary>
            Updates the status code for the response.
            </summary>
            <param name="context">
            The exception context of the exceptional event.
            </param>
        </member>
        <member name="T:RemoteCongress.Server.Api.ExceptionFilters.BlockNotFoundExceptionFilter">
            <summary>
            An excpetion handler for <see cref="T:RemoteCongress.Common.Exceptions.BlockNotFoundException"/>
            </summary>
        </member>
        <member name="P:RemoteCongress.Server.Api.ExceptionFilters.BlockNotFoundExceptionFilter.StatusCode">
            <summary>
            The http status code to be returned from this handler
            </summary>
        </member>
        <member name="M:RemoteCongress.Server.Api.ExceptionFilters.BlockNotFoundExceptionFilter.#ctor(Microsoft.Extensions.Logging.ILogger{RemoteCongress.Server.Api.ExceptionFilters.BlockNotFoundExceptionFilter})">
            <summary>
            Constructor
            </summary>
            <param name="logger">
            An <see cref="T:Microsoft.Extensions.Logging.ILogger"/> instance for logging
            </param>
        </member>
        <member name="M:RemoteCongress.Server.Api.ExceptionFilters.BlockNotFoundExceptionFilter.CanHandle(System.Exception)">
            <summary>
            Checks if the exception can be handled by this handler
            </summary>
            <param name="exception">
            The exception that needs handling
            </param>
            <returns>
            true, if the exception can be handled
            </returns>
        </member>
        <member name="T:RemoteCongress.Server.Api.ExceptionFilters.BlockNotStorableExceptionFilter">
            <summary>
            An excpetion handler for <see cref="T:RemoteCongress.Common.Exceptions.BlockNotStorableException"/>
            </summary>
        </member>
        <member name="P:RemoteCongress.Server.Api.ExceptionFilters.BlockNotStorableExceptionFilter.StatusCode">
            <summary>
            The http status code to be returned from this handler
            </summary>
        </member>
        <member name="M:RemoteCongress.Server.Api.ExceptionFilters.BlockNotStorableExceptionFilter.#ctor(Microsoft.Extensions.Logging.ILogger{RemoteCongress.Server.Api.ExceptionFilters.BlockNotStorableExceptionFilter})">
            <summary>
            Constructor
            </summary>
            <param name="logger">
            An <see cref="T:Microsoft.Extensions.Logging.ILogger"/> instance for logging
            </param>
        </member>
        <member name="M:RemoteCongress.Server.Api.ExceptionFilters.BlockNotStorableExceptionFilter.CanHandle(System.Exception)">
            <summary>
            Checks if the exception can be handled by this handler
            </summary>
            <param name="exception">
            The exception that needs handling
            </param>
            <returns>
            true, if the exception can be handled
            </returns>
        </member>
        <member name="T:RemoteCongress.Server.Api.ExceptionFilters.InvalidBlockSignatureExceptionFilter">
            <summary>
            An excpetion handler for <see cref="T:RemoteCongress.Common.Exceptions.InvalidBlockSignatureException"/>
            </summary>
        </member>
        <member name="P:RemoteCongress.Server.Api.ExceptionFilters.InvalidBlockSignatureExceptionFilter.StatusCode">
            <summary>
            The http status code to be returned from this handler
            </summary>
        </member>
        <member name="M:RemoteCongress.Server.Api.ExceptionFilters.InvalidBlockSignatureExceptionFilter.#ctor(Microsoft.Extensions.Logging.ILogger{RemoteCongress.Server.Api.ExceptionFilters.InvalidBlockSignatureExceptionFilter})">
            <summary>
            Constructor
            </summary>
            <param name="logger">
            An <see cref="T:Microsoft.Extensions.Logging.ILogger"/> instance for logging
            </param>
        </member>
        <member name="M:RemoteCongress.Server.Api.ExceptionFilters.InvalidBlockSignatureExceptionFilter.CanHandle(System.Exception)">
            <summary>
            Checks if the exception can be handled by this handler
            </summary>
            <param name="exception">
            The exception that needs handling
            </param>
            <returns>
            true, if the exception can be handled
            </returns>
        </member>
        <member name="T:RemoteCongress.Server.Api.ExceptionFilters.MissingBodyExceptionFilter">
            <summary>
            An excpetion handler for <see cref="T:RemoteCongress.Server.Api.Exceptions.MissingBodyException"/>
            </summary>
        </member>
        <member name="P:RemoteCongress.Server.Api.ExceptionFilters.MissingBodyExceptionFilter.StatusCode">
            <summary>
            The http status code to be returned from this handler
            </summary>
        </member>
        <member name="M:RemoteCongress.Server.Api.ExceptionFilters.MissingBodyExceptionFilter.#ctor(Microsoft.Extensions.Logging.ILogger{RemoteCongress.Server.Api.ExceptionFilters.MissingBodyExceptionFilter})">
            <summary>
            Constructor
            </summary>
            <param name="logger">
            An <see cref="T:Microsoft.Extensions.Logging.ILogger"/> instance for logging
            </param>
        </member>
        <member name="M:RemoteCongress.Server.Api.ExceptionFilters.MissingBodyExceptionFilter.CanHandle(System.Exception)">
            <summary>
            Checks if the exception can be handled by this handler
            </summary>
            <param name="exception">
            The exception that needs handling
            </param>
            <returns>
            true, if the exception can be handled
            </returns>
        </member>
        <member name="T:RemoteCongress.Server.Api.ExceptionFilters.MissingPathParameterExceptionFilter">
            <summary>
            An excpetion handler for <see cref="T:RemoteCongress.Server.Api.Exceptions.MissingPathParameterException"/>
            </summary>
        </member>
        <member name="P:RemoteCongress.Server.Api.ExceptionFilters.MissingPathParameterExceptionFilter.StatusCode">
            <summary>
            The http status code to be returned from this handler
            </summary>
        </member>
        <member name="M:RemoteCongress.Server.Api.ExceptionFilters.MissingPathParameterExceptionFilter.#ctor(Microsoft.Extensions.Logging.ILogger{RemoteCongress.Server.Api.ExceptionFilters.MissingPathParameterExceptionFilter})">
            <summary>
            Constructor
            </summary>
            <param name="logger">
            An <see cref="T:Microsoft.Extensions.Logging.ILogger"/> instance for logging
            </param>
        </member>
        <member name="M:RemoteCongress.Server.Api.ExceptionFilters.MissingPathParameterExceptionFilter.CanHandle(System.Exception)">
            <summary>
            Checks if the exception can be handled by this handler
            </summary>
            <param name="exception">
            The exception that needs handling
            </param>
            <returns>
            true, if the exception can be handled
            </returns>
        </member>
        <member name="T:RemoteCongress.Server.Api.ExceptionFilters.UnacceptableMediaTypeExceptionFilter">
            <summary>
            An excpetion handler for <see cref="T:RemoteCongress.Server.Api.Exceptions.UnacceptableMediaTypeException"/>
            </summary>
        </member>
        <member name="P:RemoteCongress.Server.Api.ExceptionFilters.UnacceptableMediaTypeExceptionFilter.StatusCode">
            <summary>
            The http status code to be returned from this handler
            </summary>
        </member>
        <member name="M:RemoteCongress.Server.Api.ExceptionFilters.UnacceptableMediaTypeExceptionFilter.#ctor(Microsoft.Extensions.Logging.ILogger{RemoteCongress.Server.Api.ExceptionFilters.UnacceptableMediaTypeExceptionFilter})">
            <summary>
            Constructor
            </summary>
            <param name="logger">
            An <see cref="T:Microsoft.Extensions.Logging.ILogger"/> instance for logging
            </param>
        </member>
        <member name="M:RemoteCongress.Server.Api.ExceptionFilters.UnacceptableMediaTypeExceptionFilter.CanHandle(System.Exception)">
            <summary>
            Checks if the exception can be handled by this handler
            </summary>
            <param name="exception">
            The exception that needs handling
            </param>
            <returns>
            true, if the exception can be handled
            </returns>
        </member>
        <member name="T:RemoteCongress.Server.Api.ExceptionFilters.UnknownBlockMediaTypeExceptionFilter">
            <summary>
            An excpetion handler for <see cref="T:RemoteCongress.Common.Exceptions.UnknownBlockMediaTypeException"/>
            </summary>
        </member>
        <member name="P:RemoteCongress.Server.Api.ExceptionFilters.UnknownBlockMediaTypeExceptionFilter.StatusCode">
            <summary>
            The http status code to be returned from this handler
            </summary>
        </member>
        <member name="M:RemoteCongress.Server.Api.ExceptionFilters.UnknownBlockMediaTypeExceptionFilter.#ctor(Microsoft.Extensions.Logging.ILogger{RemoteCongress.Server.Api.ExceptionFilters.UnknownBlockMediaTypeExceptionFilter})">
            <summary>
            Constructor
            </summary>
            <param name="logger">
            An <see cref="T:Microsoft.Extensions.Logging.ILogger"/> instance for logging
            </param>
        </member>
        <member name="M:RemoteCongress.Server.Api.ExceptionFilters.UnknownBlockMediaTypeExceptionFilter.CanHandle(System.Exception)">
            <summary>
            Checks if the exception can be handled by this handler
            </summary>
            <param name="exception">
            The exception that needs handling
            </param>
            <returns>
            true, if the exception can be handled
            </returns>
        </member>
        <member name="T:RemoteCongress.Server.Api.ExceptionFilters.UnparsableMediaTypeExceptionFilter">
            <summary>
            An excpetion handler for <see cref="T:RemoteCongress.Server.Api.Exceptions.UnparsableMediaTypeException"/>
            </summary>
        </member>
        <member name="P:RemoteCongress.Server.Api.ExceptionFilters.UnparsableMediaTypeExceptionFilter.StatusCode">
            <summary>
            The http status code to be returned from this handler
            </summary>
        </member>
        <member name="M:RemoteCongress.Server.Api.ExceptionFilters.UnparsableMediaTypeExceptionFilter.#ctor(Microsoft.Extensions.Logging.ILogger{RemoteCongress.Server.Api.ExceptionFilters.UnparsableMediaTypeExceptionFilter})">
            <summary>
            Constructor
            </summary>
            <param name="logger">
            An <see cref="T:Microsoft.Extensions.Logging.ILogger"/> instance for logging
            </param>
        </member>
        <member name="M:RemoteCongress.Server.Api.ExceptionFilters.UnparsableMediaTypeExceptionFilter.CanHandle(System.Exception)">
            <summary>
            Checks if the exception can be handled by this handler
            </summary>
            <param name="exception">
            The exception that needs handling
            </param>
            <returns>
            true, if the exception can be handled
            </returns>
        </member>
        <member name="T:RemoteCongress.Server.Api.Exceptions.MissingBodyException">
            <summary>
            An <see cref="T:System.Exception"/> to throw when a request body is missing.
            </summary>
        </member>
        <member name="M:RemoteCongress.Server.Api.Exceptions.MissingBodyException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor
            </summary>
            <param name="message">
            A message describing the exceptional situation in detail.
            </param>
            <param name="innerException">
            Another exception that brought this exception to light.
            </param>
        </member>
        <member name="M:RemoteCongress.Server.Api.Exceptions.MissingBodyException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="message">
            A message describing the exceptional situation in detail.
            </param>
        </member>
        <member name="M:RemoteCongress.Server.Api.Exceptions.MissingBodyException.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:RemoteCongress.Server.Api.Exceptions.MissingPathParameterException">
            <summary>
            An <see cref="T:System.Exception"/> to throw when a path parameter is missing.
            </summary>
        </member>
        <member name="M:RemoteCongress.Server.Api.Exceptions.MissingPathParameterException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor
            </summary>
            <param name="message">
            A message describing the exceptional situation in detail.
            </param>
            <param name="innerException">
            Another exception that brought this exception to light.
            </param>
        </member>
        <member name="M:RemoteCongress.Server.Api.Exceptions.MissingPathParameterException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="message">
            A message describing the exceptional situation in detail.
            </param>
        </member>
        <member name="M:RemoteCongress.Server.Api.Exceptions.MissingPathParameterException.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:RemoteCongress.Server.Api.Exceptions.UnacceptableMediaTypeException">
            <summary>
            An <see cref="T:System.Exception"/> to throw when a request body is missing.
            </summary>
        </member>
        <member name="M:RemoteCongress.Server.Api.Exceptions.UnacceptableMediaTypeException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor
            </summary>
            <param name="message">
            A message describing the exceptional situation in detail.
            </param>
            <param name="innerException">
            Another exception that brought this exception to light.
            </param>
        </member>
        <member name="M:RemoteCongress.Server.Api.Exceptions.UnacceptableMediaTypeException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="message">
            A message describing the exceptional situation in detail.
            </param>
        </member>
        <member name="M:RemoteCongress.Server.Api.Exceptions.UnacceptableMediaTypeException.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:RemoteCongress.Server.Api.Exceptions.UnparsableMediaTypeException">
            <summary>
            An <see cref="T:System.Exception"/> to throw when a request body is missing.
            </summary>
        </member>
        <member name="M:RemoteCongress.Server.Api.Exceptions.UnparsableMediaTypeException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor
            </summary>
            <param name="message">
            A message describing the exceptional situation in detail.
            </param>
            <param name="innerException">
            Another exception that brought this exception to light.
            </param>
        </member>
        <member name="M:RemoteCongress.Server.Api.Exceptions.UnparsableMediaTypeException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="message">
            A message describing the exceptional situation in detail.
            </param>
        </member>
        <member name="M:RemoteCongress.Server.Api.Exceptions.UnparsableMediaTypeException.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:RemoteCongress.Server.Api.Formatters.VerifiedDataCollectionOutputFormatter`1">
            <summary>
            Validates a signed <see cref="T:RemoteCongress.Common.VerifiedData`1"/> and writes it to the http response <see cref="T:System.IO.Stream"/>.
            </summary>
            <typeparam name="TData">
            Verified data model
            </typeparam>
        </member>
        <member name="M:RemoteCongress.Server.Api.Formatters.VerifiedDataCollectionOutputFormatter`1.#ctor(Microsoft.Extensions.Logging.ILogger,System.Collections.Generic.IEnumerable{RemoteCongress.Common.Serialization.ICodec{System.Collections.Generic.IEnumerable{RemoteCongress.Common.SignedData}}})">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:RemoteCongress.Server.Api.Formatters.VerifiedDataCollectionOutputFormatter`1.WriteResponseBodyAsync(Microsoft.AspNetCore.Mvc.Formatters.OutputFormatterWriteContext,System.Text.Encoding)">
            <summary>
            Writes the signed and validated <see cref="T:RemoteCongress.Common.VerifiedData`1"/> to the http response <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="context">
            The <see cref="T:Microsoft.AspNetCore.Mvc.Formatters.OutputFormatterWriteContext"/>.
            </param>
            <param name="selectedEncoding">
            The selected <see cref="T:System.Text.Encoding"/>.
            </param>
        </member>
        <member name="M:RemoteCongress.Server.Api.Formatters.VerifiedDataCollectionOutputFormatter`1.CanWriteType(System.Type)">
            <summary>
            Checks if a <see cref="T:System.Type"/> can be handled by this <see cref="T:Microsoft.AspNetCore.Mvc.Formatters.TextOutputFormatter"/>.
            </summary>
            <param name="type">
            The <see cref="T:System.Type"/> to test.
            </param>
            <returns>
            True if <paramref name="type"/> can be handled by this <see cref="T:Microsoft.AspNetCore.Mvc.Formatters.TextOutputFormatter"/>.
            </returns>
        </member>
        <member name="T:RemoteCongress.Server.Api.Formatters.VerifiedDataInputFormatter`1">
            <summary>
            Reads and validates a signed <see cref="T:RemoteCongress.Common.VerifiedData`1"/> from the input.
            </summary>
            <typeparam name="TData">
            Verified data model
            </typeparam>
        </member>
        <member name="M:RemoteCongress.Server.Api.Formatters.VerifiedDataInputFormatter`1.#ctor(Microsoft.Extensions.Logging.ILogger,System.Collections.Generic.IEnumerable{RemoteCongress.Common.Serialization.ICodec{RemoteCongress.Common.SignedData}},System.Collections.Generic.IEnumerable{RemoteCongress.Common.Serialization.ICodec{`0}})">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:RemoteCongress.Server.Api.Formatters.VerifiedDataInputFormatter`1.ReadRequestBodyAsync(Microsoft.AspNetCore.Mvc.Formatters.InputFormatterContext,System.Text.Encoding)">
            <summary>
            Reads a <see cref="T:RemoteCongress.Common.SignedData"/> from a http request <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="context">
            The <see cref="T:Microsoft.AspNetCore.Mvc.Formatters.InputFormatterContext"/>.
            </param>
            <param name="encoding">
            The selected <see cref="T:System.Text.Encoding"/>.
            </param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> with the signed and validated <see cref="T:RemoteCongress.Common.VerifiedData`1"/>.
            </returns>
        </member>
        <member name="M:RemoteCongress.Server.Api.Formatters.VerifiedDataInputFormatter`1.CanReadType(System.Type)">
            <summary>
            Checks if a <see cref="T:System.Type"/> can be handled by this <see cref="T:Microsoft.AspNetCore.Mvc.Formatters.TextInputFormatter"/>.
            </summary>
            <param name="type">
            The <see cref="T:System.Type"/> to test.
            </param>
            <returns>
            True if <paramref name="type"/> can be handled by this <see cref="T:Microsoft.AspNetCore.Mvc.Formatters.TextInputFormatter"/>.
            </returns>
        </member>
        <member name="T:RemoteCongress.Server.Api.Formatters.VerifiedDataOutputFormatter`1">
            <summary>
            Validates a signed <see cref="T:RemoteCongress.Common.VerifiedData`1"/> and writes it to the http response <see cref="T:System.IO.Stream"/>.
            </summary>
            <typeparam name="TData">
            Verified data model
            </typeparam>
        </member>
        <member name="M:RemoteCongress.Server.Api.Formatters.VerifiedDataOutputFormatter`1.#ctor(Microsoft.Extensions.Logging.ILogger,System.Collections.Generic.IEnumerable{RemoteCongress.Common.Serialization.ICodec{RemoteCongress.Common.SignedData}})">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:RemoteCongress.Server.Api.Formatters.VerifiedDataOutputFormatter`1.WriteResponseBodyAsync(Microsoft.AspNetCore.Mvc.Formatters.OutputFormatterWriteContext,System.Text.Encoding)">
            <summary>
            Writes the signed and validated <see cref="T:RemoteCongress.Common.VerifiedData`1"/> to the http response <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="context">
            The <see cref="T:Microsoft.AspNetCore.Mvc.Formatters.OutputFormatterWriteContext"/>.
            </param>
            <param name="selectedEncoding">
            The selected <see cref="T:System.Text.Encoding"/>.
            </param>
        </member>
        <member name="M:RemoteCongress.Server.Api.Formatters.VerifiedDataOutputFormatter`1.CanWriteType(System.Type)">
            <summary>
            Checks if a <see cref="T:System.Type"/> can be handled by this <see cref="T:Microsoft.AspNetCore.Mvc.Formatters.TextOutputFormatter"/>.
            </summary>
            <param name="type">
            The <see cref="T:System.Type"/> to test.
            </param>
            <returns>
            True if <paramref name="type"/> can be handled by this <see cref="T:Microsoft.AspNetCore.Mvc.Formatters.TextOutputFormatter"/>.
            </returns>
        </member>
        <member name="T:RemoteCongress.Server.Api.ModelBinders.BuildFromQueryAttribute">
            <summary>
            An attribute to build <see cref="T:RemoteCongress.Common.Repositories.Queries.IQuery"/> from the query string.
            </summary>
        </member>
        <member name="M:RemoteCongress.Server.Api.ModelBinders.BuildFromQueryAttribute.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:RemoteCongress.Server.Api.ModelBinders.QueryModelBinder">
            <summary>
            A <see cref="T:Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder"/> implementation for <see cref="T:RemoteCongress.Common.Repositories.Queries.IQuery"/>s.
            </summary>
        </member>
        <member name="M:RemoteCongress.Server.Api.ModelBinders.QueryModelBinder.#ctor(RemoteCongress.Common.Serialization.ICodec{RemoteCongress.Common.Repositories.Queries.IQuery})">
            <summary>
            Constructor
            </summary>
            <param name="codec">
            A codec used to serialize and deserialize.
            </param>
        </member>
        <member name="M:RemoteCongress.Server.Api.ModelBinders.QueryModelBinder.BindModelAsync(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext)">
            <summary>
            Processes the request in <paramref name="bindingContext"/> for any included queries.
            </summary>
            <param name="bindingContext">
            The <see cref="T:Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext"/> to process
            </param>
        </member>
        <member name="T:RemoteCongress.Server.Api.Program">
            <summary>
            The entrypoint class
            </summary>
        </member>
        <member name="M:RemoteCongress.Server.Api.Program.Main(System.String[])">
            <summary>
            The entrypoint method
            </summary>
            <param name="args">
            Arguments passed to the program when it was called.
            </param>
        </member>
        <member name="M:RemoteCongress.Server.Api.Program.CreateHostBuilder(System.String[])">
            <summary>
            Setsup the post builder for the api server.
            </summary>
            <param name="args">
            Arguments passed to the program when it was called.
            </param>
            <returns>
            An <see cref="T:Microsoft.Extensions.Hosting.IHostBuilder"/> configured to build the api server host.
            </returns>
        </member>
        <member name="T:RemoteCongress.Server.Api.Startup">
            <summary>
            Startup logic to execute when spinning up the api.
            </summary>
        </member>
        <member name="M:RemoteCongress.Server.Api.Startup.#ctor(Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Constructor
            </summary>
            <param name="configuration">
            An <see cref="T:Microsoft.Extensions.Configuration.IConfiguration"/> instance to use when configuring the server.
            </param>
        </member>
        <member name="M:RemoteCongress.Server.Api.Startup.ConfigureServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Configures and sets up DI for the server.
            </summary>
            <param name="services">
            An <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/> to use to register services against.
            </param>
        </member>
        <member name="M:RemoteCongress.Server.Api.Startup.Configure(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Hosting.IWebHostEnvironment)">
            <summary>
            Configures teh application
            </summary>
            <param name="app">
            The <see cref="T:Microsoft.AspNetCore.Builder.IApplicationBuilder"/> to configure
            </param>
            <param name="env">
            The <see cref="T:Microsoft.AspNetCore.Hosting.IWebHostEnvironment"/> to configure against.
            </param>
        </member>
    </members>
</doc>
